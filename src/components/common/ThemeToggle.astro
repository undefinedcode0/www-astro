---
import { Moon, Sun } from 'astro-feather-icons2';
// Read the cookie server-side *only* to set the initial icon state correctly
// The actual class on <html> is handled by the layout
const initialTheme = Astro.cookies.get('theme')?.value === 'dark' ? 'dark' : 'light';
---

<button
  id="theme-toggle"
  title="Toggle theme"
  class="inline-grid place-items-center rounded-sm bg-text/10 text-text aspect-square size-8 smooth-md hover:bg-text/20">
  <span id="icon-moon" style={`display: ${initialTheme === 'dark' ? 'inline-block' : 'none'}`}><Moon size="16" /></span>
  <span id="icon-sun" style={`display: ${initialTheme === 'light' ? 'inline-block' : 'none'}`}><Sun size="16" /></span>
</button>
<div class="corner-smooth">
  <div class="smooth"></div>
</div>

<div id="theme-transition-overlay" class="fixed inset-0 pointer-events-none will-change-transform"></div>

<script>
  // Function to update the displayed icon based on the current theme class on <html>
  function updateIcon() {
    const isDark = document.documentElement.classList.contains('dark');
    if (moonIcon) moonIcon.style.display = !isDark ? 'none' : 'inline-block';
    if (sunIcon) sunIcon.style.display = !isDark ? 'inline-block' : 'none';
  }

  // Function to toggle the theme with transition
  function toggleTheme() {
    const isDark = document.documentElement.classList.contains('dark');
    const newTheme = isDark ? 'light' : 'dark';

    if (!overlay) return;

    // Set initial position of overlay
    overlay.style.transform = 'translateX(-125%)';
    overlay.style.display = 'block';

    // Trigger animation
    setTimeout(() => {
      overlay.style.transform = 'translateX(0) translateY(0)';

      // Change theme when overlay is halfway through
      setTimeout(() => {
        if (newTheme === 'dark') {
          document.documentElement.classList.add('dark');
        } else {
          document.documentElement.classList.remove('dark');
        }
        // Set cookie
        document.cookie = `theme=${newTheme};path=/;max-age=31536000;samesite=lax`; // max-age=1 year
        // Optionally keep localStorage sync'd if other scripts use it
        // localStorage.setItem('theme', newTheme);
        updateIcon();

        // Complete the animation
        setTimeout(() => {
          overlay.style.transform = 'translateX(125%)';

          // Hide overlay when done
          setTimeout(() => {
            overlay.style.display = 'none';
          }, 500);
        }, 50);
      }, 250);
    }, 10);
  }

  // Attach the click event listener to the toggle button
  function initThemeToggle() {
    const toggleButton = document.getElementById('theme-toggle');
    window.moonIcon = document.getElementById('icon-moon');
    window.sunIcon = document.getElementById('icon-sun');
    window.overlay = document.getElementById('theme-transition-overlay');
    if (toggleButton) {
      toggleButton.addEventListener('click', toggleTheme);
    }
    // Initial icon state is now set via inline style from server,
    // but we call updateIcon on load/swap in case the class was somehow changed client-side
    // before this script runs or during swaps.
    updateIcon();
  }

  initThemeToggle();
  document.addEventListener('astro:page-load', () => {
    initThemeToggle();
  });
</script>

<style>
  #theme-transition-overlay {
    transform: translateX(-125%);
    scale: 1.2;
    transition: transform 600ms ease;
    will-change: transform;
    z-index: 9999;
    background: linear-gradient(to right in lch, #d97173, #627fae, #c872c5);
    background-size: cover;
    filter: blur(30px);
    mix-blend-mode: color-dodge !important;
    opacity: 1;
    display: none;
    mask-image: linear-gradient(to right, rgba(0, 0, 0, 0), rgba(0, 0, 0, 1), rgba(0, 0, 0, 0));
  }
</style>
