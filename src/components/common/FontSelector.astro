---
const fontCookie = Astro.cookies.get('font');
const validFonts = ['sans', 'serif', 'mono'];
let initialFont = fontCookie?.value;
if (!initialFont || !validFonts.includes(initialFont)) {
  initialFont = 'serif';
}

const fonts = [
  { name: 'serif', label: 'Serif', class: 'font-crimson' },
  { name: 'sans', label: 'Sans', class: 'font-inter' },
  { name: 'mono', label: 'Mono', class: 'font-mono' },
];

// Determine the initial class based on the initialFont
const initialFontClass = fonts.find((f) => f.name === initialFont)?.class || 'font-inter';

// Add the initial font class to the html tag server-side
// This ensures the correct font is applied on initial load without FOUC
Astro.response.headers.set('Set-Cookie', `font=${initialFont}; Path=/; Max-Age=31536000; SameSite=Lax`);
---

<div id="font-selector" class="flex p-1 space-x-1 rounded-xl bg-text/10 w-fit shadow-md">
  {
    fonts.map(({ name, label, class: className }) => (
      <button
        data-font={name}
        title={`Set font to ${label}`}
        class:list={[
          'font-button px-3 py-1 text-sm text-text smooth-md rounded-lg',
          { 'bg-bg': initialFont === name }, // Active state
          { 'hover:bg-text/10': initialFont !== name }, // Hover state for inactive buttons
          className,
        ]}>
        {label}
      </button>
    ))
  }
</div>

<script is:inline define:vars={{ initialFont, fonts }}>
  let currentFont = initialFont;
  const fontClasses = fonts.map((f) => f.class); // ['font-inter', 'font-crimson', 'font-mono']

  function updateButtons(selectedFont) {
    const fontButtons = document.querySelectorAll('.font-button');
    fontButtons.forEach((button) => {
      const buttonFont = button.dataset.font;
      if (buttonFont === selectedFont) {
        button.classList.add('bg-bg');
        button.classList.remove('hover:bg-text/10');
      } else {
        button.classList.remove('bg-bg');
        button.classList.add('hover:bg-text/10');
      }
    });
  }

  function setFont(newFont) {
    if (newFont === currentFont) return; // Don't do anything if font is the same

    const oldFontData = fonts.find((f) => f.name === currentFont);
    const newFontData = fonts.find((f) => f.name === newFont);

    if (!newFontData) return; // Exit if the new font isn't valid

    currentFont = newFont;

    // Remove all possible font classes
    document.documentElement.classList.remove(...fontClasses);
    // Add the new font class
    document.documentElement.classList.add(newFontData.class);

    // Update the cookie
    document.cookie = `font=${newFont};path=/;max-age=31536000;samesite=lax`;

    updateButtons(newFont);
  }

  // Initialize font toggle
  function initFontSelector() {
    const fontButtons = document.querySelectorAll('.font-button');
    fontButtons.forEach((button) => {
      // Remove potential duplicate listeners from SPA navigation
      button.removeEventListener('click', handleFontButtonClick);
      // Add the listener
      button.addEventListener('click', handleFontButtonClick);
    });

    // Ensure the correct button is highlighted on init
    updateButtons(currentFont);
  }

  function handleFontButtonClick(event) {
    const newFont = event.currentTarget.dataset.font;
    if (newFont) {
      setFont(newFont);
    }
  }

  initFontSelector();
  document.addEventListener('astro:page-load', initFontSelector);
</script>
