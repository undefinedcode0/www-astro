---
import Aside from '@/components/common/Aside.astro';
import BaseHead from '@/components/common/BaseHead.astro';
import Footer from '@/components/common/Footer.astro';
import Header from '@/components/common/Header.astro';
// import { ClientRouter } from 'astro:transitions'; // Keep commented out for 'static' unless using view transitions explicitly

interface Props {
  title: string;
  description: string;
  dim?: boolean;
  class?: string; // For the <main> element
}
const { title, description, dim: isDim, class: classList } = Astro.props;
---

<html lang="en">
  {/* Theme and font classes will be added by the head script */}

  <BaseHead {title} {description} />
  {/* <ClientRouter fallback="swap" /> */}

  {/* ===== Blocking Client-side Theme & Font Initialization Script ===== */}
  {/* This runs before the body renders to prevent FOUC */}
  <script is:inline>
    (function () {
      // --- Theme Handling ---
      const themeStorageKey = 'theme';
      const themeQuery = '(prefers-color-scheme: dark)';
      const defaultTheme = 'system'; // Default if nothing is stored

      function getThemeSetting() {
        return localStorage.getItem(themeStorageKey) || defaultTheme;
      }

      function applyTheme(theme) {
        const d = document.documentElement;
        // Clear previous theme state classes
        d.classList.remove('dark', 'light', 'system');

        if (theme === 'dark') {
          d.classList.add('dark');
        } else if (theme === 'light') {
          d.classList.add('light'); // Add 'light' class if your CSS needs it
        } else {
          // 'system'
          d.classList.add('system'); // Mark that system preference is active
          // Apply the *actual* system theme
          if (window.matchMedia(themeQuery).matches) {
            d.classList.add('dark');
          } else {
            // Optional: d.classList.add('light');
          }
        }
      }

      const currentThemeSetting = getThemeSetting();
      applyTheme(currentThemeSetting);

      // Add listener for system theme changes *only* if the stored setting is 'system'
      // This ensures dynamic updates if the user changes OS theme while on the site
      if (currentThemeSetting === 'system') {
        const mediaQuery = window.matchMedia(themeQuery);
        const handleSystemThemeChange = (e) => {
          // Re-check storage in case user selected light/dark explicitly in another tab
          if (localStorage.getItem(themeStorageKey) === 'system' || !localStorage.getItem(themeStorageKey)) {
            const d = document.documentElement;
            if (e.matches) {
              d.classList.add('dark');
              d.classList.remove('light'); // Ensure consistency
            } else {
              d.classList.remove('dark');
              // Optional: d.classList.add('light');
            }
          }
        };
        mediaQuery.addEventListener('change', handleSystemThemeChange);
      }

      // --- Font Handling ---
      const fontStorageKey = 'font';
      const validFonts = ['sans', 'serif', 'mono'];
      const defaultFont = 'serif'; // Default if nothing is stored or invalid
      const fontClassMap = {
        sans: 'font-sans',
        serif: 'font-serif',
        mono: 'font-mono',
      };

      function getFontSetting() {
        const storedFont = localStorage.getItem(fontStorageKey);
        return validFonts.includes(storedFont) ? storedFont : defaultFont;
      }

      function applyFont(font) {
        const d = document.documentElement;
        // Remove all possible font classes first
        Object.values(fontClassMap).forEach((cls) => d.classList.remove(cls));
        // Add the correct class
        d.classList.add(fontClassMap[font]);
      }

      const currentFontSetting = getFontSetting();
      applyFont(currentFontSetting);
    })(); // IIFE to contain scope
  </script>
  {/* ================================================================= */}

  <body class="flex flex-col items-center p-5 sm:p-12 lg:p-20 text-text/70 bg-bg">
    <Header />
    <div class="flex flex-wrap gap-20 w-full bg-bg">
      <Aside class="top-20 2xl:sticky" dim={isDim} transition:persist="aside" />
      <div class="max-w-full w-[80ch]">
        <main class:list={[classList]}>
          <slot />
        </main>
      </div>
    </div>
    <Footer />
  </body>
</html>
