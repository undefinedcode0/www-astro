---
import Aside from '@/components/common/Aside.astro';
import BaseHead from '@/components/common/BaseHead.astro';
import Footer from '@/components/common/Footer.astro';
import Header from '@/components/common/Header.astro';
// import { ClientRouter } from 'astro:transitions'; // Keep commented out for 'static' unless using view transitions explicitly

interface Props {
  title: string;
  description: string;
  dim?: boolean;
  class?: string; // For the <main> element
}
const { title, description, dim: isDim, class: classList } = Astro.props;
---

<html lang="en">
  {/* Theme and font classes will be added by the head script */}

  <BaseHead {title} {description} />
  {/* <ClientRouter fallback="swap" /> */}

  {/* ===== Blocking Client-side Theme & Font Initialization Script ===== */}
  {/* This runs before the body renders to prevent FOUC */}
  <script is:inline>
    (function () {
      const d = document.documentElement;

      // --- Theme Handling (Optimized) ---
      const themeKey = 'theme';
      const defaultTheme = 'system';
      const darkQuery = window.matchMedia('(prefers-color-scheme: dark)');

      function getTheme() {
        return localStorage.getItem(themeKey) || defaultTheme;
      }

      function applyTheme(theme) {
        // Use a single class toggle instead of multiple operations
        d.className = d.className.replace(/\b(dark|light|system)\b/g, '');
        d.classList.add(theme);

        if (theme === 'system') {
          d.classList.toggle('dark', darkQuery.matches);
        } else if (theme === 'dark') {
          d.classList.add('dark');
        }
      }

      // --- Font Handling (Optimized) ---
      const fontKey = 'font';
      const fontMap = { sans: 'font-sans', serif: 'font-serif', mono: 'font-mono' };
      const defaultFont = 'serif';

      function applyFont(font) {
        // Remove all font classes at once
        Object.values(fontMap).forEach((cls) => d.classList.remove(cls));
        d.classList.add(fontMap[font] || fontMap[defaultFont]);
      }

      // Apply settings
      const theme = getTheme();
      const font = localStorage.getItem(fontKey) || defaultFont;

      applyTheme(theme);
      applyFont(font);

      // Add system theme listener only if needed
      if (theme === 'system') {
        darkQuery.addEventListener('change', (e) => {
          if (getTheme() === 'system') {
            d.classList.toggle('dark', e.matches);
          }
        });
      }
    })();
  </script>
  {/* ================================================================= */}

  <body class="flex flex-col items-center p-5 sm:p-12 lg:p-20 text-text/70 bg-bg">
    <Header />
    <div class="flex flex-wrap gap-20 w-full bg-bg">
      <Aside class="top-20 2xl:sticky" dim={isDim} transition:persist="aside" />
      <div class="max-w-full w-[80ch]">
        <main class:list={[classList]}>
          <slot />
        </main>
      </div>
    </div>
    <Footer />
  </body>
</html>
